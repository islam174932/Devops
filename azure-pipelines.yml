# This pipeline builds, tests, and publishes Maven artifacts.

trigger:
- main  # Trigger pipeline on changes to the 'main' branch

pool:
  name: Default  # Use your registered agent pool (replace 'testpool' with 'Default')

steps:
# Step 1: Checkout the code from the repository
- task: Checkout@1
  inputs:
    clean: true  # Clean the workspace before getting the sources

# Step 2: Set up JDK
- task: UseJavaVersion@1
  inputs:
    versionSpec: '17'  # Specify the JDK version to use (Java 17)
    jdkArchitectureOption: 'x64'  # JDK architecture
    jdkSourceOption: 'Preinstalled'  # Use the pre-installed JDK on the agent

# Step 3: Maven Build and Test with Explicit Maven Path
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'  # Path to your pom.xml file
    mavenOptions: '-Xmx3072m'  # Optional Maven options to set memory limits
    mavenHomeOption: 'Path'  # Specify that Maven is installed in a custom path
    mavenVersionOption: 'Custom'  # Custom version of Maven
    mavenPath: 'C:\\maven\\apache-maven-3.9.1\\bin'  # Path to your Maven installation
    javaHomeOption: 'JDKVersion'  # Set Java Home from the JDKVersion task
    jdkVersionOption: '17'  # Use Java 17
    jdkArchitectureOption: 'x64'  # Use 64-bit JDK
    publishJUnitResults: true  # Publish JUnit test results
    testResultsFiles: '**/surefire-reports/TEST-*.xml'  # JUnit test results pattern
    goals: 'clean package'  # Maven goals to run (clean and package)

# Step 4: Publish JUnit Test Results
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/surefire-reports/TEST-*.xml'  # Path to test results
    testResultsFormat: 'JUnit'
    failTaskOnFailedTests: true  # Option to fail the task if tests fail

# Step 5: Publish Maven Artifacts
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'target'  # Path to the target directory where artifacts are stored
    ArtifactName: 'JavaBuildArtifacts'  # Name for the published artifact
    publishLocation: 'Container'  # Publish location


